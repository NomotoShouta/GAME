//==============================
//
// ジョイパットの処理[joypad.cpp]
// Author:Nomoto Shouta
//
//==============================

//#include "joypad.h"
//#include <winerror.h>
//
////===========================================
//// コンストラクタ
////===========================================
//CJoypad::CJoypad()
//{
//
//}
//
////===========================================
//// デストラクタ
////===========================================
//CJoypad::~CJoypad()
//{
//
//}
//
////===========================================
//// 初期設定
////===========================================
//HRESULT InitJoypad()
//{
//	//メモリクリア
//	/*memset(&joykeyState, 0, sizeof(XINPUT_STATE));*/
//
//	//XInputのステート設定(有効にする)
//	XInputEnable(true);
//
//	return S_OK;
//}
//
////===========================================
//// ジョイパットの終了処理
////===========================================
//void UninitJoypad()
//{
//	//XInputのステートを設定(無効にする)
//	XInputEnable(false);
//}
//
////===========================================
//// ジョイパットの更新処理
////===========================================
//void UpdateJoypad()
//{
//	XINPUT_STATE joykeyState; //ジョイパットの入力情報
//
//	//ジョイパットの状態を取得
//	if (XInputGetState(0, &joykeyState) == ERROR_SUCCESS)
//	{
//		joykeyState = joykeyState; //ジョイパットのプレス情報を保存
//	}
//}
//
////===========================================
//// ジョイパットの終了処理
////===========================================
//void Uninit()
//{
//	//ジョイパットの終了処理
//	UninitJoypad();
//}
//
////===========================================
//// ジョイパットの更新処理
////===========================================
//void Update()
//{
//	//ジョイパットの更新処理
//	UpdateJoypad();
//}
//
////===========================================
//// ジョイパットのプレス情報を取得
////===========================================
//bool GetJoypadPress(CJoypad::JOYKEY key)
//{
//	/*return (m_joykeyState.Gamepad.wButtons & (0x01 << key)) ? true : false;*/
//}